Hi Pascal,

Here are the routines for frustum extraction and culling. I could not test one for the sphere but I believe it should work, if not just let me know.

Regards,
Prashant





================================================================================================================



static float frustum[6][4];
static float clip[16];

void extractFrustum_( )
{
   float   proj[16];
   float   modl[16];
   //float   clip[16];
   float   t;

   /* Get the current PROJECTION matrix from OpenGL */
   glGetFloatv( GL_PROJECTION_MATRIX, proj );

   /* Get the current MODELVIEW matrix from OpenGL */
   glGetFloatv( GL_MODELVIEW_MATRIX, modl );

   clip[0] = modl[0]*proj[0] + modl[1]*proj[4] + modl[2]*proj[8] + modl[3]*proj[12];
   clip[1] = modl[0]*proj[1] + modl[1]*proj[5] + modl[2]*proj[9] + modl[3]*proj[13];
   clip[2] = modl[0]*proj[2] + modl[1]*proj[6] + modl[2]*proj[10] + modl[3]*proj[14];
   clip[3] = modl[0]*proj[3] + modl[1]*proj[7] + modl[2]*proj[11] + modl[3]*proj[15];

   clip[4] = modl[4]*proj[0] + modl[5]*proj[4] + modl[6]*proj[8] + modl[7]*proj[12];
   clip[5] = modl[4]*proj[1] + modl[5]*proj[5] + modl[6]*proj[9] + modl[7]*proj[13];
   clip[6] = modl[4]*proj[2] + modl[5]*proj[6] + modl[6]*proj[10] + modl[7]*proj[14];
   clip[7] = modl[4]*proj[3] + modl[5]*proj[7] + modl[6]*proj[11] + modl[7]*proj[15];

   clip[8] = modl[8]*proj[0] + modl[9]*proj[4] + modl[10]*proj[8] + modl[11]*proj[12];
   clip[9] = modl[8]*proj[1] + modl[9]*proj[5] + modl[10]*proj[9] + modl[11]*proj[13];
   clip[10] = modl[8]*proj[2] + modl[9]*proj[6] + modl[10]*proj[10] + modl[11]*proj[14];
   clip[11] = modl[8]*proj[3] + modl[9]*proj[7] + modl[10]*proj[11] + modl[11]*proj[15];

   clip[12] = modl[12]*proj[0] + modl[13]*proj[4] + modl[14]*proj[8] + modl[15]*proj[12];
   clip[13] = modl[12]*proj[1] + modl[13]*proj[5] + modl[14]*proj[9] + modl[15]*proj[13];
   clip[14] = modl[12]*proj[2] + modl[13]*proj[6] + modl[14]*proj[10] + modl[15]*proj[14];
   clip[15] = modl[12]*proj[3] + modl[13]*proj[7] + modl[14]*proj[11] + modl[15]*proj[15];

   frustum[0][0] = clip[3]+clip[0]; 
   frustum[0][1] = clip[7]+clip[4]; 
   frustum[0][2] = clip[11]+clip[8]; 
   frustum[0][3] = clip[15]+clip[12];

   frustum[1][0] = clip[3]-clip[0]; 
   frustum[1][1] = clip[7]-clip[4]; 
   frustum[1][2] = clip[11]-clip[8]; 
   frustum[1][3] = clip[15]-clip[12];
   
   frustum[2][0] = clip[3]+clip[1]; 
   frustum[2][1] = clip[7]+clip[5]; 
   frustum[2][2] = clip[11]+clip[9]; 
   frustum[2][3] = clip[15]+clip[13];
   
   frustum[3][0] = clip[3]-clip[1]; 
   frustum[3][1] = clip[7]-clip[5]; 
   frustum[3][2] = clip[11]-clip[9]; 
   frustum[3][3] = clip[15]-clip[13];
   
   frustum[4][0] = clip[3]+clip[2]; 
   frustum[4][1] = clip[7]+clip[6];
   frustum[4][2] = clip[11]+clip[10]; 
   frustum[4][3] = clip[15]+clip[14];
   
   frustum[5][0] = clip[3]-clip[2]; 
   frustum[5][1] = clip[7]-clip[6]; 
   frustum[5][2] = clip[11]-clip[10];
   frustum[5][3] = clip[15]-clip[14];
} 

inline
bool pointInsideFrustum_( float x, float y, float z )
{
	for( int p = 0; p < 6; p++ )
	{
		if( frustum[p][0]*x + frustum[p][1]*y + frustum[p][2]*z + frustum[p][3] < 0 )
			return false;
	}

	return true;
}

// Give the min and max of the box 
// Alternately, you can change it to accept all 8 vertices of the box etc.
bool isBoxInsideFrustum_( float x0, float y0, float z0, float x1, float y1, float z1 )
{
	float x[2] = { x0, x1 };
	float y[2] = { y0, y1 };
	float z[2] = { z0, z1 };

	bool mark = false;

	for( int i = 0; i < 2; i++ )
		for( int j = 0; j < 2; j++ )
			for( int k = 0; k < 2; k++ )
			{
				mark = mark || pointInsideFrustum_( x[i], y[j], z[k] );
			}

	return mark;
}

// Sphere center and rad as input
bool isSphereInsideFrustum_( float x, float y, float z, float rad )
{
	for( int p = 0; p < 6; p++ )
	{
		float dist =  frustum[p][0]*x + frustum[p][1]*y + frustum[p][2]*z + frustum[p][3];
		if( dist <= -rad )
			return false;
	}

	return true;
}
