/*
 * GigaVoxels is a ray-guided streaming library used for efficient
 * 3D real-time rendering of highly detailed volumetric scenes.
 *
 * Copyright (C) 2011-2013 INRIA <http://www.inria.fr/>
 *
 * Authors : GigaVoxels Team
 *
 * GigaVoxels is distributed under a dual-license scheme.
 * You can obtain a specific license from Inria at gigavoxels-licensing@inria.fr.
 * Otherwise the default license is the GPL version 3.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/** 
 * @version 1.0
 */

#include "ProxyGeometry.h"

/******************************************************************************
 ******************************* INCLUDE SECTION ******************************
 ******************************************************************************/

// GigaVoxels
#include <GvUtils/GvShaderProgram.h>

// Project
#include "Mesh.h"

// glm
//#include <glm/gtc/matrix_transform.hpp>
//#include <glm/gtx/transform2.hpp>
//#include <glm/gtx/projection.hpp>

// Cuda
#include <vector_types.h>

// Qt
#include <QCoreApplication>
#include <QString>
#include <QDir>
#include <QFileInfo>
#include <QImage>

// STL
#include <iostream>

// System
#include <cassert>

#include <QTextStream>
#include <QFile>

/******************************************************************************
 ****************************** NAMESPACE SECTION *****************************
 ******************************************************************************/

// GigaVoxels
using namespace GvUtils;

// STL
using namespace std;

/******************************************************************************
 ************************* DEFINE AND CONSTANT SECTION ************************
 ******************************************************************************/

/******************************************************************************
 ***************************** TYPE DEFINITION ********************************
 ******************************************************************************/

/******************************************************************************
 ***************************** METHOD DEFINITION ******************************
 ******************************************************************************/

/******************************************************************************
 * Constructor
 ******************************************************************************/
ProxyGeometry::ProxyGeometry()
:	_mesh( NULL )
,	_shaderProgram( NULL )
,	_meshShaderProgram( NULL )
,	_frameBuffer( 0 )
,	_depthMinTex( 0 )
,	_depthMaxTex( 0 )
,	_depthTex( 0 )
,	_bufferWidth( 0 )
,	_bufferHeight( 0 )
{
}

/******************************************************************************
 * Destructor
 ******************************************************************************/
ProxyGeometry::~ProxyGeometry()
{
	finalize();
}

/******************************************************************************
 * Initialize
 *
 * @return a flag telling wheter or not it succeeds
 ******************************************************************************/
bool ProxyGeometry::initialize()
{
	bool statusOK = false;

	const QString dataRepository = QCoreApplication::applicationDirPath() + QDir::separator() + QString( "Data" );
	const QString shaderRepository = dataRepository + QDir::separator() + QString( "Shaders" ) + QDir::separator() + QString( "ProxyGeometry" );

	const QString vertexShaderFilename = shaderRepository + QDir::separator() + QString( "proxyGeometry_vert.glsl" );
	const QString tessControlShaderFilename = shaderRepository + QDir::separator() + QString( "tesselatedTerrain_tesc.glsl" );
	const QString tessEvalShaderFilename = shaderRepository + QDir::separator() + QString( "tesselatedTerrain_tese.glsl" );
	const QString geometryShaderFilename = shaderRepository + QDir::separator() + QString( "wireframe_geom.glsl" );
	const QString fragmentShaderFilename = shaderRepository + QDir::separator() + QString( "proxyGeometry_frag.glsl" );
	
	// Initialize shader program
	_shaderProgram = new GvShaderProgram();
	statusOK = _shaderProgram->addShader( GvShaderProgram::eVertexShader, vertexShaderFilename.toStdString() );
	assert( statusOK );
	statusOK = _shaderProgram->addShader( GvShaderProgram::eTesselationControlShader, tessControlShaderFilename.toStdString() );
	assert( statusOK );
	statusOK = _shaderProgram->addShader( GvShaderProgram::eTesselationEvaluationShader, tessEvalShaderFilename.toStdString() );
	assert( statusOK );
	statusOK = _shaderProgram->addShader( GvShaderProgram::eGeometryShader, geometryShaderFilename.toStdString() );
	assert( statusOK );
	statusOK = _shaderProgram->addShader( GvShaderProgram::eFragmentShader, fragmentShaderFilename.toStdString() );
	assert( statusOK );
	statusOK = _shaderProgram->link();
	assert( statusOK );
		
	// Initialize mesh
	_mesh = new Mesh();
	IMesh::ShaderProgramConfiguration shaderProgramConfiguration;
	//shaderProgramConfiguration._shaders[ GvUtils::GvShaderProgram::eVertexShader ] = "xxx_vert.glsl";
	//shaderProgramConfiguration._shaders[ GvUtils::GvShaderProgram::eFragmentShader ] = "xxx_frag.glsl";
	//_mesh->setShaderProgramConfiguration( shaderProgramConfiguration );
	const QString meshRepository = dataRepository + QDir::separator() + QString( "3DModels" ) + QDir::separator() + QString( "stanford_bunny" );
	//const QString meshFilename = meshRepository + QDir::separator() + QString( "bunny.obj" );

	//const QString meshFilename = meshRepository + QDir::separator() + QString( "dec19494-7c53-41e9-9ebe-5ec6967628db.obj" );
	//const QString meshFilename = meshRepository + QDir::separator() + QString( "f1061dd67d3a45e995c42d1e2111914d.obj" );
	const QString meshFilename = meshRepository + QDir::separator() + QString( "RomainMesh_02.obj" );
	
	/*QFile file( meshFilename );
	if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
		return false;

	QTextStream in(&file);
	QString content = in.readAll();
	content.replace( "	", " " );

	QFile outfile("RomainMesh_03.obj");
	if (!outfile.open(QIODevice::WriteOnly | QIODevice::Text))
		return false;

	QTextStream out(&outfile);
	out << content;*/
	
	statusOK = _mesh->load( meshFilename.toLatin1().constData() );
	
	return true;
}

/******************************************************************************
 * Finalize
 *
 * @return a flag telling wheter or not it succeeds
 ******************************************************************************/
bool ProxyGeometry::finalize()
{
	delete _shaderProgram;
	_shaderProgram = NULL;

	delete _meshShaderProgram;
	_meshShaderProgram = NULL;

	glDeleteFramebuffers( 1, &_frameBuffer );
	glDeleteTextures( 1, &_depthTex );
	glDeleteTextures( 1, &_depthMaxTex );
	glDeleteTextures( 1, &_depthMinTex );

	delete _mesh;
	_mesh = NULL;

	return true;
}

/******************************************************************************
 * Render
 ******************************************************************************/
void ProxyGeometry::render( const float4x4& pModelViewMatrix, const float4x4& pProjectionMatrix, const int4& pViewport )
{
	GLint location;

	// Configure OpenGL pipeline
	//glColorMask( GL_TRUE, GL_FALSE, GL_FALSE, GL_FALSE );
	//glClearColor( -10000.0f, -10000.0f, -10000.0f, -10000.0f );	// check if not clamp to [ 0.0; 1.0 ]
	//glEnable( GL_DEPTH_TEST );
	//glDisable( GL_CULL_FACE );

	// Bind frame buffer
	//glBindFramebuffer( GL_FRAMEBUFFER, _frameBuffer );
	
	// ---- [ 1 ] - Ray MIN pass ----

	// Reset color and depth buffers of FBO
//	glClearDepth( 1.0f );
//	glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );	// glclear() peut être factorisé pour les 2 colorAttachment : 0_1
	// Specify the value used for depth buffer comparisons
	// - GL_LESS : passes if the incoming depth value is less than the stored depth value
//	glDepthFunc( GL_LESS );
	// Set draw buffers
//	GLenum drawBuffers[ 1 ] = { GL_COLOR_ATTACHMENT0 };
//    glDrawBuffers( 1, drawBuffers );

	// Render proxy geometry
	_shaderProgram->use();
	// Set uniforms
	location = glGetUniformLocation( _shaderProgram->_program, "uModelViewMatrix" );
	if ( location >= 0 )
	{
		glUniformMatrix4fv( location, 1, GL_FALSE, pModelViewMatrix._array );
	}
	location = glGetUniformLocation( _shaderProgram->_program, "uNormalMatrix" );
	if ( location >= 0 )
	{
		float normalMatrix[ 9 ];
		normalMatrix[ 0 ] = pModelViewMatrix._array[ 0 ];
		normalMatrix[ 1 ] = pModelViewMatrix._array[ 1 ];
		normalMatrix[ 2 ] = pModelViewMatrix._array[ 2 ];
		normalMatrix[ 3 ] = pModelViewMatrix._array[ 4 ];
		normalMatrix[ 4 ] = pModelViewMatrix._array[ 5 ];
		normalMatrix[ 5 ] = pModelViewMatrix._array[ 6 ];
		normalMatrix[ 6 ] = pModelViewMatrix._array[ 8 ];
		normalMatrix[ 7 ] = pModelViewMatrix._array[ 9 ];
		normalMatrix[ 8 ] = pModelViewMatrix._array[ 10 ];
		/*normalMatrix[ 0 ] = pModelViewMatrix._array[ 0 ];
		normalMatrix[ 1 ] = pModelViewMatrix._array[ 4 ];
		normalMatrix[ 2 ] = pModelViewMatrix._array[ 8 ];
		normalMatrix[ 3 ] = pModelViewMatrix._array[ 1 ];
		normalMatrix[ 4 ] = pModelViewMatrix._array[ 5 ];
		normalMatrix[ 5 ] = pModelViewMatrix._array[ 9 ];
		normalMatrix[ 6 ] = pModelViewMatrix._array[ 2 ];
		normalMatrix[ 7 ] = pModelViewMatrix._array[ 6 ];
		normalMatrix[ 8 ] = pModelViewMatrix._array[ 10 ];*/
		glUniformMatrix3fv( location, 1, GL_FALSE, normalMatrix );
	}
	location = glGetUniformLocation( _shaderProgram->_program, "uProjectionMatrix" );
	if ( location >= 0 )
	{
		glUniformMatrix4fv( location, 1, GL_FALSE, pProjectionMatrix._array );
	}
	location = glGetUniformLocation( _shaderProgram->_program, "uLightPosition" );
	if ( location >= 0 )
	{
		float4 lightPosition = make_float4( 1.0, 1.0, 1.0, 1.0 );
		glUniform4f( location, lightPosition.x, lightPosition.y, lightPosition.z, lightPosition.w );
	}
	location = glGetUniformLocation( _shaderProgram->_program, "uLightIntensity" );
	if ( location >= 0 )
	{
		float3 lightIntensity = make_float3( 1.0, 1.0, 1.0 );
		glUniform3f( location, lightIntensity.x, lightIntensity.y, lightIntensity.z );
	}
	location = glGetUniformLocation( _shaderProgram->_program, "uKa" );
	if ( location >= 0 )
	{
		float3 Ka = make_float3( 0.25, 0.25, 0.25 );
		glUniform3f( location, Ka.x, Ka.y, Ka.z );
	}
	location = glGetUniformLocation( _shaderProgram->_program, "uKd" );
	if ( location >= 0 )
	{
		float3 Kd = make_float3( 0.95, 0.25, 0.55 );
		glUniform3f( location, Kd.x, Kd.y, Kd.z );
	}
	location = glGetUniformLocation( _shaderProgram->_program, "uKs" );
	if ( location >= 0 )
	{
		float3 Ks = make_float3( 0.95, 0.95, 0.95 );
		glUniform3f( location, Ks.x, Ks.y, Ks.z );
	}
	location = glGetUniformLocation( _shaderProgram->_program, "uShininess" );
	if ( location >= 0 )
	{
		float shininess = 60;
		glUniform1f( location, shininess );
	}
	location = glGetUniformLocation( _shaderProgram->_program, "uViewportMatrix" );
		if ( location >= 0 )
		{
			float viewportMatrix[ 16 ];	// no non-uniform scale

			viewportMatrix[ 0 ] = static_cast< float >( pViewport.z ) * 0.5f;
			viewportMatrix[ 1 ] = 0.0f;
			viewportMatrix[ 2 ] = 0.0f;
			viewportMatrix[ 3 ] = 0.0f;

			viewportMatrix[ 4 ] = 0.0f;
			viewportMatrix[ 5 ] = static_cast< float >( pViewport.w ) * 0.5f;
			viewportMatrix[ 6 ] = 0.0f;
			viewportMatrix[ 7 ] = 0.0f;

			viewportMatrix[ 8 ] = 0.0f;
			viewportMatrix[ 9 ] = 0.0f;
			viewportMatrix[ 10 ] = 0.5f;
			viewportMatrix[ 11 ] = 0.0f;

			viewportMatrix[ 12 ] = static_cast< float >( pViewport.x ) + static_cast< float >( pViewport.z ) * 0.5f;
			viewportMatrix[ 13 ] = static_cast< float >( pViewport.y ) + static_cast< float >( pViewport.w ) * 0.5f;
			viewportMatrix[ 14 ] = 0.5f;
			viewportMatrix[ 15 ] = 1.0f;

			glUniformMatrix4fv( location, 1, GL_FALSE, viewportMatrix );
		}

		location = glGetUniformLocation( _shaderProgram->_program, "uLineWidth" );
		if ( location >= 0 )
		{
			glUniform1f( location, 0.25f );
		}
//	glEnable( GL_CULL_FACE );
	_mesh->render( float4x4(), float4x4(), int4() );	// TO DO : think about API => what parameters do we need in render() ?
	//glDisable( GL_CULL_FACE );
	glUseProgram( 0 );

	//// ----  [ 2 ] - Ray MAX pass ----

	//// Reset color and depth buffers of FBO
	//glClearDepth( 0.0f );
	////glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );
	//glClear( GL_DEPTH_BUFFER_BIT );	// COLOR has already been cleared
	//// Specify the value used for depth buffer comparisons
	//// - GL_GREATER : passes if the incoming depth value is greater than the stored depth value
	//glDepthFunc( GL_GREATER );
	//// Set draw buffers
	//drawBuffers[ 0 ] = GL_COLOR_ATTACHMENT1;
 //   glDrawBuffers( 1, drawBuffers );
	//
	//// Render proxy geometry
	//_shaderProgram->use();
	//// No need to set uniforms
	//// - there are the same...
	//_mesh->render( float4x4(), float4x4(), int4() );	// TO DO : think about API => what parameters do we need in render() ?
	//glUseProgram( 0 );

	//// Unbind frame buffer
	//glBindFramebuffer( GL_FRAMEBUFFER, 0 );

	//// Configure OpenGL pipeline
	//glDisable( GL_DEPTH_TEST );
	//glColorMask( GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE );
}

/******************************************************************************
 * Set buffer size
 *
 * @param pWidth buffer width
 * @param pHeight buffer height
 ******************************************************************************/
void ProxyGeometry::setBufferSize( int pWidth, int pHeight )
{
	_bufferWidth = pWidth;
	_bufferHeight = pHeight;

	if ( _frameBuffer )
	{
		glDeleteFramebuffers( 1, &_frameBuffer );
	}
	if ( _depthTex )
	{
		glDeleteTextures( 1, &_depthTex );
	}
	if ( _depthMaxTex )
	{
		glDeleteTextures( 1, &_depthMaxTex );
	}
	if ( _depthMinTex )
	{
		glDeleteTextures( 1, &_depthMinTex );
	}

	// Initialize graphics resource
	glGenTextures( 1, &_depthMinTex );
	glBindTexture( GL_TEXTURE_RECTANGLE, _depthMinTex );
	glTexParameteri( GL_TEXTURE_RECTANGLE, GL_TEXTURE_MIN_FILTER, GL_NEAREST );
	glTexParameteri( GL_TEXTURE_RECTANGLE, GL_TEXTURE_MAG_FILTER, GL_NEAREST );
	glTexParameteri( GL_TEXTURE_RECTANGLE, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE );
	glTexParameteri( GL_TEXTURE_RECTANGLE, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE );
	glTexImage2D( GL_TEXTURE_RECTANGLE, 0/*level*/, GL_R32F/*internal format*/, _bufferWidth, _bufferHeight, 0/*border*/, GL_RED/*format*/, GL_FLOAT/*type*/, NULL );
	glBindTexture( GL_TEXTURE_RECTANGLE, 0 );

	// Initialize graphics resource
	glGenTextures( 1, &_depthMaxTex );
	glBindTexture( GL_TEXTURE_RECTANGLE, _depthMaxTex );
	glTexParameteri( GL_TEXTURE_RECTANGLE, GL_TEXTURE_MIN_FILTER, GL_NEAREST );
	glTexParameteri( GL_TEXTURE_RECTANGLE, GL_TEXTURE_MAG_FILTER, GL_NEAREST );
	glTexParameteri( GL_TEXTURE_RECTANGLE, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE );
	glTexParameteri( GL_TEXTURE_RECTANGLE, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE );
	glTexImage2D( GL_TEXTURE_RECTANGLE, 0/*level*/, GL_R32F/*internal format*/, _bufferWidth, _bufferHeight, 0/*border*/, GL_RED/*format*/, GL_FLOAT/*type*/, NULL );
	glBindTexture( GL_TEXTURE_RECTANGLE, 0 );

	// Initialize graphics resource
	glGenTextures( 1, &_depthTex );
	glBindTexture( GL_TEXTURE_RECTANGLE, _depthTex );
	glTexImage2D( GL_TEXTURE_RECTANGLE, 0/*level*/, GL_DEPTH_COMPONENT32F/*internal format*/, _bufferWidth, _bufferHeight, 0/*border*/, GL_DEPTH_COMPONENT/*format*/, GL_FLOAT/*type*/, NULL );
	glTexParameteri( GL_TEXTURE_RECTANGLE, GL_TEXTURE_MIN_FILTER, GL_NEAREST );
	glTexParameteri( GL_TEXTURE_RECTANGLE, GL_TEXTURE_MAG_FILTER, GL_NEAREST );
	glTexParameteri( GL_TEXTURE_RECTANGLE, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE );
	glTexParameteri( GL_TEXTURE_RECTANGLE, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE );
	glBindTexture( GL_TEXTURE_RECTANGLE, 0 );

	// Initialize graphics resource
	glGenFramebuffers( 1, &_frameBuffer );
	glBindFramebuffer( GL_FRAMEBUFFER, _frameBuffer );
	glFramebufferTexture2D( GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_RECTANGLE, _depthMinTex, 0/*level*/ );
	glFramebufferTexture2D( GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT1, GL_TEXTURE_RECTANGLE, _depthMaxTex, 0/*level*/ );
	glFramebufferTexture2D( GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_TEXTURE_RECTANGLE, _depthTex, 0/*level*/ );
	glBindFramebuffer( GL_FRAMEBUFFER, 0 );
	// TO DO
	// - test completeness
	// ...

}
