////////////////////////////////////////////////////////////////////////////////
//
// FRAGMENT SHADER
//
// Proxy Geometry
//
// - Generate a depth map of a mesh faces
// - Depending of the fixed pipeline configuration, it will be based on closests or farthest faces
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// VERSION
////////////////////////////////////////////////////////////////////////////////

#version 400

////////////////////////////////////////////////////////////////////////////////
// INPUT
////////////////////////////////////////////////////////////////////////////////

// Vertex position in Eye space
in vec3 gPosition;
in vec3 gNormal;
noperspective in vec3 EdgeDistance;

////////////////////////////////////////////////////////////////////////////////
// UNIFORM
////////////////////////////////////////////////////////////////////////////////

uniform vec4 uLightPosition;
uniform vec3 uLightIntensity;
uniform vec3 uKa;
uniform vec3 uKd;
uniform vec3 uKs;
uniform float uShininess;

uniform float uLineWidth;

////////////////////////////////////////////////////////////////////////////////
// OUTPUT
////////////////////////////////////////////////////////////////////////////////

layout (location = 0) out vec4 FragColor;

////////////////////////////////////////////////////////////////////////////////
// Function
////////////////////////////////////////////////////////////////////////////////
vec3 ads()
{
	vec3 n = normalize( gNormal );
	//vec3 l = normalize( vec3( uLightPosition ) - Position );
	vec3 l = normalize( -gPosition );
	vec3 v = normalize( -gPosition );
	vec3 r = reflect( -l, n );

	return uLightIntensity * ( uKa + uKd * max( dot( l, n ), 0.0 ) + uKs * pow( max( dot( r, v ), 0.0 ), uShininess ) );
}

////////////////////////////////////////////////////////////////////////////////
// PROGRAM
////////////////////////////////////////////////////////////////////////////////
void main()
{
	// Wireframe
	float distanceToEdge = min( EdgeDistance.z, min( EdgeDistance.x, EdgeDistance.y ) );
	//float mixValue = smoothstep( uLineWidth - 1.0, uLineWidth + 1.0, distanceToEdge );
	float mixValue = smoothstep( uLineWidth - 0.5, uLineWidth + 0.5, distanceToEdge );

	//FragColor = vec4( ads(), 1.0 );
	FragColor = mix( vec4( 0.0, 0.0, 1.0, 1.0 ), vec4( ads(), 1.0 ), mixValue );
	//FragColor = vec4( normalize( Normal ), 1.0 );
	//FragColor = mix( vec4( 0.0, 0.0, 1.0, 1.0 ), vec4( normalize( gNormal ), 1.0 ), mixValue );
}
