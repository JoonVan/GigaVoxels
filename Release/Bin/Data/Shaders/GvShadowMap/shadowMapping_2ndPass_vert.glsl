////////////////////////////////////////////////////////////////////////////////
//
// VERTEX SHADER
//
// Shadow Mapping
//
// - 2nd pass
//
// The scene is rendered from the point of view of the camera.
//
// Mandatory :
// - a FBO (frame buffer object) with a unique depth texture bound to its depth attachement
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// VERSION
////////////////////////////////////////////////////////////////////////////////

#version 400

////////////////////////////////////////////////////////////////////////////////
// INPUT
////////////////////////////////////////////////////////////////////////////////

// Vertex position
layout (location = 0) in vec3 iPosition;

// Vertex normal
//layout (location = 1) in vec3 iNormal

////////////////////////////////////////////////////////////////////////////////
// UNIFORM
////////////////////////////////////////////////////////////////////////////////

// Model-View matrix
//uniform mat4 uModelViewMatrix;

// Normal matrix
//uniform mat3 uNormalMatrix;

// Model View Projection matrix
uniform mat4 uModelViewProjectionMatrix;

// Shadow Map matrix used to transform coordinates from Model space to Shadow map space
uniform mat4 uShadowMatrix;

////////////////////////////////////////////////////////////////////////////////
// OUTPUT
////////////////////////////////////////////////////////////////////////////////

// Position in eye coordinate system
//out vec3 oPosition;

// Normal in eye coordinate system
//out vec3 oNormal;

// Shadow map coordinate
out vec4 oShadowCoord;

////////////////////////////////////////////////////////////////////////////////
// PROGRAM
////////////////////////////////////////////////////////////////////////////////
void main()
{
	// Transform position and normal from Model space to Eye space
	//oPosition = ( uModelViewMatrix * vec4( iVertexPosition, 1.0 ) ).xyz;
	//oNormal = normalize( uNormalMatrix * iVertexNormal );

	// Transform position from Model space to Shadow Map space
	oShadowCoord = uShadowMatrix * vec4( iPosition, 1.0 );

	// Transform position from Model space to Clip space
	gl_Position = uModelViewProjectionMatrix * vec4( iPosition, 1.0 );
}
