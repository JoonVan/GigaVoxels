////////////////////////////////////////////////////////////////////////////////
//
// VERTEX SHADER
//
// Proxy Geometry
//
// - Generate a depth map of a mesh faces
// - Depending of the fixed pipeline configuration, it will be based on closests or farthest faces
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// VERSION
////////////////////////////////////////////////////////////////////////////////

#version 400

////////////////////////////////////////////////////////////////////////////////
// INPUT
////////////////////////////////////////////////////////////////////////////////

layout (location = 0) in vec3 VertexPosition;
layout (location = 1) in vec3 VertexNormal;

////////////////////////////////////////////////////////////////////////////////
// UNIFORM
////////////////////////////////////////////////////////////////////////////////

uniform mat4 uModelViewMatrix;
uniform mat4 uProjectionMatrix;
//uniform mat4 uModelViewProjectionMatrix;
uniform mat3 uNormalMatrix;

////////////////////////////////////////////////////////////////////////////////
// OUTPUT
////////////////////////////////////////////////////////////////////////////////

// Vertex position in Eye space
out vec3 vPosition;
out vec3 vNormal;

////////////////////////////////////////////////////////////////////////////////
// PROGRAM
////////////////////////////////////////////////////////////////////////////////
void main()
{
	// Output eye space position
	vPosition = vec3( uModelViewMatrix * vec4( VertexPosition, 1.0 ) ).xyz;
	vNormal = uNormalMatrix * VertexNormal;

	// Send vertex to clip space
	//gl_Position = uProjectionMatrix * vec4( Position, 1.0 );
	gl_Position = vec4( VertexPosition, 1.0 );
	//gl_Position = uModelViewProjectionMatrix * vec4( VertexPosition, 1.0 );
}
